import os
import sys
import time

import redis
import requests
from fastapi import FastAPI
from fastapi.background import BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from redis_om import HashModel
from starlette.requests import Request

sys.path.append(os.path.join(os.getcwd(), "payment"))

from utils import io_helpers

app = FastAPI()

app.add_middleware(CORSMiddleware, allow_origins=["http://localhost:3000"], allow_methods=["*"], allow_headers=["*"])


redis_conn_params = io_helpers.get_secret("payment/secrets.json", "redis")
redis_conn = redis.Redis(**redis_conn_params)


class Order(HashModel):
    product_id: str
    price: float
    fee: float
    total: float
    quantity: int
    status: str  # allowed values: [pending, completed, refunded]

    class Meta:
        database = redis_conn


@app.get("/orders/{pk}")
def get(pk: str):
    return Order.get(pk)


@app.post("/orders")
async def create(order_request: Request, background_task: BackgroundTasks):
    """creates an order

    Args:
        order_request (Request): should contain following keys:
            - id
            - quantity
        background_task (BackgroundTasks)
    """
    body = await order_request.json()
    req_to_product = requests.get("http://localhost:8000/products/{}".format(body["id"]))
    product = req_to_product.json()

    # create Order object
    order = Order(
        product_id=body["id"],
        price=product["price"],
        fee=0.12 * product["price"],
        total=1.12 * product["price"],
        quantity=body["quantity"],
        status="pending",
    )

    # save order to DB
    order.save()

    # update the status from the default one
    background_task.add_task(order_completed, order)

    return order


def order_completed(order: Order):
    """updates the order status

    Args:
        order (Order): order placed when `/orders` is hit
    """
    time.sleep(5)

    order.status = "completed"
    order.save()

    # add the order of redis streams
    # * represents autogenerated ID
    redis_conn.xadd("orders_completed", order.dict(), "*")
